package com.SampleProject.core.servlets;

import org.apache.sling.api.servlets.HttpConstants;
import org.apache.sling.api.servlets.SlingAllMethodsServlet;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;

import com.day.cq.dam.api.AssetManager;

import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.api.SlingHttpServletResponse;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.api.resource.ResourceResolverFactory;

import javax.jcr.LoginException;
import javax.jcr.Session;
import javax.servlet.Servlet;
import javax.servlet.ServletException;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.Map;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.util.EntityUtils;
import org.apache.jackrabbit.vault.util.FileInputSource;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
@SuppressWarnings("serial")
@Component(service = Servlet.class, property = { "sling.servlet.methods=" + HttpConstants.METHOD_GET,
		"sling.servlet.paths=" + "/apps/imageUpload", "sling.servlet.extensions=" + "txt" })
public class ImageUploadServlet extends SlingAllMethodsServlet {

	@Reference
	ResourceResolverFactory resourceResolverFactory;
	@SuppressWarnings({ "null", "unused", "deprecation" })
	@Override
	protected void doGet(SlingHttpServletRequest request, SlingHttpServletResponse responses)
			throws ServletException, IOException {
		 String apiUrl = "https://picsum.photos/v2/list";

	        HttpClient httpClient = HttpClientBuilder.create().build();
	        HttpGet httpGet = new HttpGet(apiUrl);

	        try {
	            HttpResponse response = httpClient.execute(httpGet);
	            HttpEntity entity = response.getEntity();
	            String responseString = EntityUtils.toString(entity);
	            JSONObject jsonResponse = new JSONObject(responseString);
	            JSONArray users = jsonResponse.getJSONArray("url");
	            for (int i = 0; i < users.length(); i++) {
	                JSONObject user = users.getJSONObject(i);
	                String avatarUrl = user.getString("avatar");
	                HttpClient httpClient123 = HttpClientBuilder.create().build();
	    	        HttpGet httpGet12 = new HttpGet(avatarUrl);
	    	        HttpResponse response12 = httpClient.execute(httpGet12);
	    	      
	    	        InputStream is=response12.getEntity().getContent();
	                System.out.println("Avatar URL: " + avatarUrl);
	                ResourceResolver resourceResolver=loginAsServiceUser();
	                Session session=resourceResolver.adaptTo(Session.class);
	                AssetManager assetManager=resourceResolver.adaptTo(AssetManager.class);
	                String damPath="/content/dam/SampleProject/";
	                String name=avatarUrl.replace("https://reqres.in/img/faces/", "");
	                assetManager.createAsset(damPath+name,is,"image/jpeg", true);
	                responses.getWriter().write("Image "+name+" is uploaded\n");
	            }
	        } catch (IOException e) {
	        	 responses.getWriter().write("Node is being not created1");
	            e.printStackTrace();
	        } catch (JSONException e) {
	        	responses.getWriter().write("Node is being not created2");
				e.printStackTrace();
			} catch (LoginException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (org.apache.sling.api.resource.LoginException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} 
	}
	private ResourceResolver loginAsServiceUser() throws LoginException, org.apache.sling.api.resource.LoginException {

    	Map<String, Object> authInfo = new HashMap<String,Object>();
 	    authInfo.put(ResourceResolverFactory.SUBSERVICE, "test");
 	    @SuppressWarnings("unused")
		ResourceResolver resourceResolver=null;   	 
 	    return resourceResolver = resourceResolverFactory.getServiceResourceResolver(authInfo);		
	}
}
